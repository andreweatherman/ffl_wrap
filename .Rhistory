shiny::runApp()
swid = '41913F6A-5AEA-48D4-913F-6A5AEA58D4F3'
espn_s2 = 'AEBNVkIqYaOd5Oqobre2EZDQjvo%2BOWweECu8IZ0IVZ7Mqn%2FiglAX%2B8gkrdzUV6LfJbKGD7EYWLrCqMbH%2FtBJW%2FIv1kJ7CCEHC0IQKTGL9oE0%2FgXd5TrX12hvciAa75TKybe26B2Mpi1TC8NOtsBfGXqwa4%2FIyFWx0zoqxthGRf5506e7x%2FH5%2BYNbZf5j3UGTmmNrH%2FGi3lu8HN6GU93k%2FR5n9%2B1haw2fEPMAeRdd0kmrL5Thloc4I86jfS6hJmzRsJbvKQOUFsOq2IlIZApcSGFFSGp5iqIgCRh0XN9BM1swsw%3D%3D'
library(ffscrapr)
library(tidyverse)
library(gt)
library(gtExtras)
con <- espn_connect(
season = 2022,
league_id = 425862554,
espn_s2 = espn_s2,
swid = swid
)
scoring_hist <- ff_scoringhistory(con, 2022)
arrow::write_csv_arrow(scoring_hist, 'scoring_hist.csv')
runApp()
scoring_hist |>
group_by(pos, week) |>
arrange(desc(points)) |>
mutate(pos_rank = row_number()) |>
select(espn_id, pos_rank) |>
ungroup()
starters |>
select(week, franchise_name, player_id) |>
mutate(player_id = as.character(player_id))
# get starters
# starters <- ff_starters(con) |> select(-eligible_lineup_slots)
starters <- read.csv('starters.csv')
starters |>
select(week, franchise_name, player_id) |>
mutate(player_id = as.character(player_id))
starters |>
select(week, franchise_name, player_id) |>
mutate(player_id = as.character(player_id)) |> glimpse()
starters |>
mutate(start = ifelse(lineup_slot == 'BE', '', 'check'),
player_id = as.character(player_id)) |>
select(week, player_id, start)
starters |>
mutate(start = ifelse(lineup_slot == 'BE', '', 'check'),
player_id = as.character(player_id)) |>
select(week, player_id, start) |> glimpse()
scoring_hist
scoring_hist |>
filter(player_name == input$player_name) |>
mutate(fumbles = sack_fumbles_lost + receiving_fumbles_lost + rushing_fumbles_lost,
two_pt_scores = receiving_2pt_conversions + rushing_2pt_conversions + passing_2pt_conversions) |>
left_join(pos_rank_week |> select(week, espn_id, pos_rank), by = c('espn_id', 'week')) |>
left_join(player_team, by = c('week', 'espn_id' = 'player_id')) |>
left_join(did_start, by = c('week', 'espn_id' = 'player_id'))
pos_rank_week
player_team
# get team player was on for each week
player_team <- starters |>
select(week, franchise_name, player_id) |>
mutate(player_id = as.character(player_id))
# get if player started in a given week
did_start <- starters |>
mutate(start = ifelse(lineup_slot == 'BE', '', 'check'),
player_id = as.character(player_id)) |>
select(week, player_id, start)
player_team
# get pos. rank for indv. weeks
pos_rank_week <- scoring_hist |>
group_by(pos, week) |>
arrange(desc(points)) |>
mutate(pos_rank = row_number()) |>
select(espn_id, pos_rank) |>
ungroup()
pos_rank_week
player_team
player_team |> glimpse()
did_start
did_start |> glimpse()
scoring_hist
runApp()
choice
choice = 'Jalen Hurts'
scoring_hist |>
filter(player_name == choice) |>
mutate(fumbles = sack_fumbles_lost + receiving_fumbles_lost + rushing_fumbles_lost,
two_pt_scores = receiving_2pt_conversions + rushing_2pt_conversions + passing_2pt_conversions) |>
left_join(pos_rank_week |> select(week, espn_id, pos_rank), by = c('espn_id', 'week')) |>
left_join(player_team, by = c('week', 'espn_id' = 'player_id')) |>
left_join(did_start, by = c('week', 'espn_id' = 'player_id')) |>
mutate(franchise_name = ifelse(is.na(franchise_name), 'FREE AGENT', franchise_name))
runApp()
pos_rank_week
player_team |> glimpse()
scoring_hist
runApp()
shinyWidgetsGallery()
runApp()
# get draft
draft <- read.csv('draft.csv')
draft
draft |> glimpse()
franchise_tibble
# define franchise tibble
franchise_tibble <- tibble(
team = ff_franchises(con) |> pluck(2),
name = c('Sam Whitestone', 'Phillip Jennings', 'Allie Whitestone',
'Tom Whitestone', 'JJ DeVos', 'Nolan DeVos', 'Dan DeVos', 'Andrew Weatherman')
)
franchise_tibble
draft_recap_owner <- reactive({
draft |>
left_join(franchise_tibble, by = 'franchise_name' = 'name')
draft |>
left_join(franchise_tibble, by = c('franchise_name' = 'name'))
glimpse(draft)
glimpse(franchise_tibble)
franchise_tibble |> rename('name' = 'owner')
franchise_tibble |> rename('owner' = 'name')
draft |>
left_join(franchise_tibble |> rename('owner' = 'name'), by = c('franchise_name' = 'team'))
runApp()
runApp()
shinyWidgetsGallery()
runApp()
shinyWidgetsGallery()
runApp()
shinyWidgetsGallery()
runApp()
ff_rosters(con)
glimpse(ff_rosters(con))
View(ff_rosters(con))
ff_schedule(con)
ff_schedule(con) |> glimpse()
fft()
?fft
ffscrapr::dp_name_mapping
ffscrapr::espn_players()
ffscrapr::espn_players(con)
ffscrapr::espn_potentialpoints(con)
draft
jsonlite::fromJSON('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/4242335')
jsonlite::fromJSON('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/4242335')
a <- jsonlite::fromJSON('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/4242335')
View(a)
a[["athlete"]][["headshot"]][["href"]]
draft
draft$player_id[1:5]
a[["athlete"]][["headshot"]][["href"]]
map2_dfr(
.x = draft$player_id[1:5],
.y = draft$player_name,
.f = function(x, y) {
url <- paste0('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/', x)
dat <- jsonlite::fromJSON(url)
tib <- tibble(
id = x,
player = y,
url = dat[["athlete"]][["headshot"]][["href"]]
)
}
)
map2_dfr(
.x = draft$player_id[1:5],
.y = draft$player_name[1:5],
.f = function(x, y) {
url <- paste0('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/', x)
dat <- jsonlite::fromJSON(url)
tib <- tibble(
id = x,
player = y,
url = dat[["athlete"]][["headshot"]][["href"]]
)
}
)
draft_headshots <- map2_dfr(
.x = draft$player_id,
.y = draft$player_name,
.f = function(x, y) {
url <- paste0('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/', x)
dat <- jsonlite::fromJSON(url)
tib <- tibble(
id = x,
player = y,
url = dat[["athlete"]][["headshot"]][["href"]]
)
}
)
draft |> arrange(id)
draft |> arrange(espn_id)
draft |> arrange(player_id)
draft_no_dst <- draft |> filter(!grepl('D/ST', player_name))
draft_headshots <- map2_dfr(
.x = draft_no_dst$player_id,
.y = draft_no_dst$player_name,
.f = function(x, y) {
url <- paste0('https://site.web.api.espn.com/apis/common/v3/sports/football/nfl/athletes/', x)
dat <- jsonlite::fromJSON(url)
tib <- tibble(
id = x,
player = y,
url = dat[["athlete"]][["headshot"]][["href"]]
)
}
)
draft_headshots
